// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Skadoosh.Common.DomainModels;
using Skadoosh.Common.ViewModels;

namespace Skadoosh.IPhone
{
	public partial class SelectSurveyController : UIViewController,IAppView
	{
		private LoadingOverlay loadingOverlay;

		#region IAppView implementation

		public ViewModelBase VM { get; set;}

		#endregion
		public SelectSurveyController (IntPtr handle) : base (handle)
		{
		}



		public override void ViewDidLoad (){

			btnStart.TouchUpInside+= async(s,a)=>{
				loadingOverlay = new LoadingOverlay (UIScreen.MainScreen.Bounds);
				View.Add (loadingOverlay);
				if(VM is ParticipateLiveVM){
					var vm= ((ParticipateLiveVM)VM);
					vm.ChannelName=txtSurveyCode.Text;
					vm.User.FirstName=txtFirstName.Text;
					vm.User.LastName=txtLastName.Text;
					var result = await vm.FindSurveyCurrentChannel();
					loadingOverlay.Hide();
					if(result==1){
						var controller = (LiveSurveyController)this.Storyboard.InstantiateViewController("LiveSurvey");
						controller.VM=vm;
						this.PresentViewController(controller,true,null);
					}
					else{
						var alert = new UIAlertView(){
							Title = "Error",
							Message = vm.ErrorMessage
						};
						alert.AddButton("Ok");
						alert.Show();
					}
				}
				else{
					var vm= ((ParticipateStaticVM)VM);
					vm.ChannelName=txtSurveyCode.Text;
					vm.User.FirstName=txtFirstName.Text;
					vm.User.LastName=txtLastName.Text;
					var result =  await vm.FindSurveyCurrentChannel();
					loadingOverlay.Hide();
					if(result==1){
						var controller = (StaticSurveyController)this.Storyboard.InstantiateViewController("StaticSurvey");
						controller.VM=vm;
						this.PresentViewController(controller,true,null);
					}
					else{
						var alert = new UIAlertView(){
							Title = "Error",
							Message = vm.ErrorMessage
						};
						alert.AddButton("Ok");
						alert.Show();
					}
				}
			};

		}


		public override void TouchesBegan (NSSet touches, UIEvent evt)
		{
			base.TouchesBegan (touches, evt);
			this.View.EndEditing(true);
		}
	}
}
